// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExchangeRates_API_Testing.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Endpoints")]
    public partial class EndpointsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Endpoints.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Endpoints", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("HTTPS Free user has no access to function endpoints")]
        [NUnit.Framework.TestCaseAttribute("Historical Rates", "https://api.exchangeratesapi.io/v1/2013-12-24?access_key=25e4c2014ab865fe0ba38e5b" +
            "80717f94&base=GBP&symbols=USD,CAD,EUR", "{\"error\":{\"code\":\"https_access_restricted\",\"message\":\"Access Restricted - Your cu" +
            "rrent Subscription Plan does not support HTTPS Encryption.\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Base Currency", "https://api.exchangeratesapi.io/v1/latest?access_key=25e4c2014ab865fe0ba38e5b8071" +
            "7f94&base=USD", "{\"error\":{\"code\":\"https_access_restricted\",\"message\":\"Access Restricted - Your cu" +
            "rrent Subscription Plan does not support HTTPS Encryption.\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Convert", "https://api.exchangeratesapi.io/v1/convert?access_key=25e4c2014ab865fe0ba38e5b807" +
            "17f94&from=GBP&to=JPY&amount=25", "{\"error\":{\"code\":\"https_access_restricted\",\"message\":\"Access Restricted - Your cu" +
            "rrent Subscription Plan does not support HTTPS Encryption.\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Time-Series", "https://api.exchangeratesapi.io/v1/timeseries?access_key=25e4c2014ab865fe0ba38e5b" +
            "80717f94&start_date=2012-05-01&end_date=2012-05-25", "{\"error\":{\"code\":\"https_access_restricted\",\"message\":\"Access Restricted - Your cu" +
            "rrent Subscription Plan does not support HTTPS Encryption.\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Fluctuation", "https://api.exchangeratesapi.io/v1/fluctuation?access_key=25e4c2014ab865fe0ba38e5" +
            "b80717f94&start_date=2015-12-01&end_date=2015-12-24", "{\"error\":{\"code\":\"https_access_restricted\",\"message\":\"Access Restricted - Your cu" +
            "rrent Subscription Plan does not support HTTPS Encryption.\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Supported Symbols", "https://api.exchangeratesapi.io/v1/symbols?access_key=25e4c2014ab865fe0ba38e5b807" +
            "17f94", "{\"error\":{\"code\":\"https_access_restricted\",\"message\":\"Access Restricted - Your cu" +
            "rrent Subscription Plan does not support HTTPS Encryption.\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Latest rate", "https://api.exchangeratesapi.io/v1/latest?access_key=25e4c2014ab865fe0ba38e5b8071" +
            "7f94", "{\"error\":{\"code\":\"https_access_restricted\",\"message\":\"Access Restricted - Your cu" +
            "rrent Subscription Plan does not support HTTPS Encryption.\"}}", null)]
        public virtual void HTTPSFreeUserHasNoAccessToFunctionEndpoints(string functionName, string apiEndpointUrl, string apiErrorResponse, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("functionName", functionName);
            argumentsOfScenario.Add("apiEndpointUrl", apiEndpointUrl);
            argumentsOfScenario.Add("apiErrorResponse", apiErrorResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HTTPS Free user has no access to function endpoints", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("the url {0} to {1} endpoint", apiEndpointUrl, functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("send to the api.exchangeratesapi.io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then(string.Format("the API response with request content {0}", apiErrorResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("HTTP Free user has no access to function endpoints")]
        [NUnit.Framework.TestCaseAttribute("Historical Rates", "http://api.exchangeratesapi.io/v1/2013-12-24?access_key=25e4c2014ab865fe0ba38e5b8" +
            "0717f94&base=GBP&symbols=USD,CAD,EUR", "{\"error\":{\"code\":\"base_currency_access_restricted\",\"message\":\"An unexpected error" +
            " ocurred. [Technical Support: support@apilayer.com]\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Base Currency", "http://api.exchangeratesapi.io/v1/latest?access_key=25e4c2014ab865fe0ba38e5b80717" +
            "f94&base=USD", "{\"error\":{\"code\":\"base_currency_access_restricted\",\"message\":\"An unexpected error" +
            " ocurred. [Technical Support: support@apilayer.com]\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Convert", "http://api.exchangeratesapi.io/v1/convert?access_key=25e4c2014ab865fe0ba38e5b8071" +
            "7f94&from=GBP&to=JPY&amount=25", "{\"error\":{\"code\":\"function_access_restricted\",\"message\":\"Access Restricted - Your" +
            " current Subscription Plan does not support this API Function.\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Time-Series", "http://api.exchangeratesapi.io/v1/timeseries?access_key=25e4c2014ab865fe0ba38e5b8" +
            "0717f94&start_date=2012-05-01&end_date=2012-05-25", "{\"error\":{\"code\":\"function_access_restricted\",\"message\":\"Access Restricted - Your" +
            " current Subscription Plan does not support this API Function.\"}}", null)]
        [NUnit.Framework.TestCaseAttribute("Fluctuation", "http://api.exchangeratesapi.io/v1/fluctuation?access_key=25e4c2014ab865fe0ba38e5b" +
            "80717f94&start_date=2015-12-01&end_date=2015-12-24", "{\"error\":{\"code\":\"function_access_restricted\",\"message\":\"Access Restricted - Your" +
            " current Subscription Plan does not support this API Function.\"}}", null)]
        public virtual void HTTPFreeUserHasNoAccessToFunctionEndpoints(string functionName, string apiEndpointUrl, string apiErrorResponse, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("functionName", functionName);
            argumentsOfScenario.Add("apiEndpointUrl", apiEndpointUrl);
            argumentsOfScenario.Add("apiErrorResponse", apiErrorResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HTTP Free user has no access to function endpoints", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
 testRunner.Given(string.Format("the url {0} to {1} endpoint", apiEndpointUrl, functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
 testRunner.When("send to the api.exchangeratesapi.io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then(string.Format("the API response with request content {0}", apiErrorResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("HTTP Free user has access to Supported Symbols endpoint")]
        [NUnit.Framework.TestCaseAttribute("Supported Symbols", "http://api.exchangeratesapi.io/v1/symbols?access_key=25e4c2014ab865fe0ba38e5b8071" +
            "7f94", "{\"success\":true,\"symbols\":{\"AED\":\"United Arab Emirates Dirham\",\"AFN\":\"Afghan Afgh" +
            "ani\",\"ALL\":\"Albanian Lek\",\"AMD\":\"Armenian Dram\",\"ANG\":\"Netherlands Antillean Gui" +
            "lder\",\"AOA\":\"Angolan Kwanza\",\"ARS\":\"Argentine Peso\",\"AUD\":\"Australian Dollar\",\"A" +
            "WG\":\"Aruban Florin\",\"AZN\":\"Azerbaijani Manat\",\"BAM\":\"Bosnia-Herzegovina Converti" +
            "ble Mark\",\"BBD\":\"Barbadian Dollar\",\"BDT\":\"Bangladeshi Taka\",\"BGN\":\"Bulgarian Lev" +
            "\",\"BHD\":\"Bahraini Dinar\",\"BIF\":\"Burundian Franc\",\"BMD\":\"Bermudan Dollar\",\"BND\":\"" +
            "Brunei Dollar\",\"BOB\":\"Bolivian Boliviano\",\"BRL\":\"Brazilian Real\",\"BSD\":\"Bahamian" +
            " Dollar\",\"BTC\":\"Bitcoin\",\"BTN\":\"Bhutanese Ngultrum\",\"BWP\":\"Botswanan Pula\",\"BYN\"" +
            ":\"New Belarusian Ruble\",\"BYR\":\"Belarusian Ruble\",\"BZD\":\"Belize Dollar\",\"CAD\":\"Ca" +
            "nadian Dollar\",\"CDF\":\"Congolese Franc\",\"CHF\":\"Swiss Franc\",\"CLF\":\"Chilean Unit o" +
            "f Account (UF)\",\"CLP\":\"Chilean Peso\",\"CNY\":\"Chinese Yuan\",\"COP\":\"Colombian Peso\"" +
            ",\"CRC\":\"Costa Rican Col\\u00f3n\",\"CUC\":\"Cuban Convertible Peso\",\"CUP\":\"Cuban Peso" +
            "\",\"CVE\":\"Cape Verdean Escudo\",\"CZK\":\"Czech Republic Koruna\",\"DJF\":\"Djiboutian Fr" +
            "anc\",\"DKK\":\"Danish Krone\",\"DOP\":\"Dominican Peso\",\"DZD\":\"Algerian Dinar\",\"EGP\":\"E" +
            "gyptian Pound\",\"ERN\":\"Eritrean Nakfa\",\"ETB\":\"Ethiopian Birr\",\"EUR\":\"Euro\",\"FJD\":" +
            "\"Fijian Dollar\",\"FKP\":\"Falkland Islands Pound\",\"GBP\":\"British Pound Sterling\",\"G" +
            "EL\":\"Georgian Lari\",\"GGP\":\"Guernsey Pound\",\"GHS\":\"Ghanaian Cedi\",\"GIP\":\"Gibralta" +
            "r Pound\",\"GMD\":\"Gambian Dalasi\",\"GNF\":\"Guinean Franc\",\"GTQ\":\"Guatemalan Quetzal\"" +
            ",\"GYD\":\"Guyanaese Dollar\",\"HKD\":\"Hong Kong Dollar\",\"HNL\":\"Honduran Lempira\",\"HRK" +
            "\":\"Croatian Kuna\",\"HTG\":\"Haitian Gourde\",\"HUF\":\"Hungarian Forint\",\"IDR\":\"Indones" +
            "ian Rupiah\",\"ILS\":\"Israeli New Sheqel\",\"IMP\":\"Manx pound\",\"INR\":\"Indian Rupee\",\"" +
            "IQD\":\"Iraqi Dinar\",\"IRR\":\"Iranian Rial\",\"ISK\":\"Icelandic Kr\\u00f3na\",\"JEP\":\"Jers" +
            "ey Pound\",\"JMD\":\"Jamaican Dollar\",\"JOD\":\"Jordanian Dinar\",\"JPY\":\"Japanese Yen\",\"" +
            "KES\":\"Kenyan Shilling\",\"KGS\":\"Kyrgystani Som\",\"KHR\":\"Cambodian Riel\",\"KMF\":\"Como" +
            "rian Franc\",\"KPW\":\"North Korean Won\",\"KRW\":\"South Korean Won\",\"KWD\":\"Kuwaiti Din" +
            "ar\",\"KYD\":\"Cayman Islands Dollar\",\"KZT\":\"Kazakhstani Tenge\",\"LAK\":\"Laotian Kip\"," +
            "\"LBP\":\"Lebanese Pound\",\"LKR\":\"Sri Lankan Rupee\",\"LRD\":\"Liberian Dollar\",\"LSL\":\"L" +
            "esotho Loti\",\"LTL\":\"Lithuanian Litas\",\"LVL\":\"Latvian Lats\",\"LYD\":\"Libyan Dinar\"," +
            "\"MAD\":\"Moroccan Dirham\",\"MDL\":\"Moldovan Leu\",\"MGA\":\"Malagasy Ariary\",\"MKD\":\"Mace" +
            "donian Denar\",\"MMK\":\"Myanma Kyat\",\"MNT\":\"Mongolian Tugrik\",\"MOP\":\"Macanese Patac" +
            "a\",\"MRO\":\"Mauritanian Ouguiya\",\"MUR\":\"Mauritian Rupee\",\"MVR\":\"Maldivian Rufiyaa\"" +
            ",\"MWK\":\"Malawian Kwacha\",\"MXN\":\"Mexican Peso\",\"MYR\":\"Malaysian Ringgit\",\"MZN\":\"M" +
            "ozambican Metical\",\"NAD\":\"Namibian Dollar\",\"NGN\":\"Nigerian Naira\",\"NIO\":\"Nicarag" +
            "uan C\\u00f3rdoba\",\"NOK\":\"Norwegian Krone\",\"NPR\":\"Nepalese Rupee\",\"NZD\":\"New Zeal" +
            "and Dollar\",\"OMR\":\"Omani Rial\",\"PAB\":\"Panamanian Balboa\",\"PEN\":\"Peruvian Nuevo S" +
            "ol\",\"PGK\":\"Papua New Guinean Kina\",\"PHP\":\"Philippine Peso\",\"PKR\":\"Pakistani Rupe" +
            "e\",\"PLN\":\"Polish Zloty\",\"PYG\":\"Paraguayan Guarani\",\"QAR\":\"Qatari Rial\",\"RON\":\"Ro" +
            "manian Leu\",\"RSD\":\"Serbian Dinar\",\"RUB\":\"Russian Ruble\",\"RWF\":\"Rwandan Franc\",\"S" +
            "AR\":\"Saudi Riyal\",\"SBD\":\"Solomon Islands Dollar\",\"SCR\":\"Seychellois Rupee\",\"SDG\"" +
            ":\"Sudanese Pound\",\"SEK\":\"Swedish Krona\",\"SGD\":\"Singapore Dollar\",\"SHP\":\"Saint He" +
            "lena Pound\",\"SLL\":\"Sierra Leonean Leone\",\"SOS\":\"Somali Shilling\",\"SRD\":\"Suriname" +
            "se Dollar\",\"STD\":\"S\\u00e3o Tom\\u00e9 and Pr\\u00edncipe Dobra\",\"SVC\":\"Salvadoran " +
            "Col\\u00f3n\",\"SYP\":\"Syrian Pound\",\"SZL\":\"Swazi Lilangeni\",\"THB\":\"Thai Baht\",\"TJS\"" +
            ":\"Tajikistani Somoni\",\"TMT\":\"Turkmenistani Manat\",\"TND\":\"Tunisian Dinar\",\"TOP\":\"" +
            "Tongan Pa\\u02bbanga\",\"TRY\":\"Turkish Lira\",\"TTD\":\"Trinidad and Tobago Dollar\",\"TW" +
            "D\":\"New Taiwan Dollar\",\"TZS\":\"Tanzanian Shilling\",\"UAH\":\"Ukrainian Hryvnia\",\"UGX" +
            "\":\"Ugandan Shilling\",\"USD\":\"United States Dollar\",\"UYU\":\"Uruguayan Peso\",\"UZS\":\"" +
            "Uzbekistan Som\",\"VEF\":\"Venezuelan Bol\\u00edvar Fuerte\",\"VND\":\"Vietnamese Dong\",\"" +
            "VUV\":\"Vanuatu Vatu\",\"WST\":\"Samoan Tala\",\"XAF\":\"CFA Franc BEAC\",\"XAG\":\"Silver (tr" +
            "oy ounce)\",\"XAU\":\"Gold (troy ounce)\",\"XCD\":\"East Caribbean Dollar\",\"XDR\":\"Specia" +
            "l Drawing Rights\",\"XOF\":\"CFA Franc BCEAO\",\"XPF\":\"CFP Franc\",\"YER\":\"Yemeni Rial\"," +
            "\"ZAR\":\"South African Rand\",\"ZMK\":\"Zambian Kwacha (pre-2013)\",\"ZMW\":\"Zambian Kwac" +
            "ha\",\"ZWL\":\"Zimbabwean Dollar\"}}", null)]
        public virtual void HTTPFreeUserHasAccessToSupportedSymbolsEndpoint(string functionName, string apiEndpointUrl, string apiResponse, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("functionName", functionName);
            argumentsOfScenario.Add("apiEndpointUrl", apiEndpointUrl);
            argumentsOfScenario.Add("apiResponse", apiResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HTTP Free user has access to Supported Symbols endpoint", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given(string.Format("the url {0} to {1} endpoint", apiEndpointUrl, functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.When("send to the api.exchangeratesapi.io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then(string.Format("the API response with request content {0}", apiResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("HTTP Free user has access to latest currency rate endpoint")]
        [NUnit.Framework.TestCaseAttribute("Latest rate", "http://api.exchangeratesapi.io/v1/latest?access_key=25e4c2014ab865fe0ba38e5b80717" +
            "f94", null)]
        public virtual void HTTPFreeUserHasAccessToLatestCurrencyRateEndpoint(string functionName, string apiEndpointUrl, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("functionName", functionName);
            argumentsOfScenario.Add("apiEndpointUrl", apiEndpointUrl);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HTTP Free user has access to latest currency rate endpoint", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
 testRunner.Given(string.Format("the url {0} to {1} endpoint", apiEndpointUrl, functionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When("send to the api.exchangeratesapi.io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("the API response contains date\":\"currentDate EUR\":1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
